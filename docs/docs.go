// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/booking": {
            "get": {
                "description": "Get a booking by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "booking"
                ],
                "summary": "Find a booking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Booking details",
                        "schema": {
                            "$ref": "#/definitions/handlers.OKBookingAnswer"
                        }
                    },
                    "400": {
                        "description": "Booking not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadServerAnswer"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new booking with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "booking"
                ],
                "summary": "Create a booking",
                "parameters": [
                    {
                        "description": "Booking data",
                        "name": "booking",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bookingModule.BookingModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Booking created",
                        "schema": {
                            "$ref": "#/definitions/handlers.OKAnswer"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadServerAnswer"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a booking by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "booking"
                ],
                "summary": "Delete a booking",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Booking deleted",
                        "schema": {
                            "$ref": "#/definitions/handlers.OKAnswer"
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadServerAnswer"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userModule.UserModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/handlers.OKAnswer"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadServerAnswer"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted",
                        "schema": {
                            "$ref": "#/definitions/handlers.OKAnswer"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.BadServerAnswer"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "bookingModule.BookingModel": {
            "type": "object",
            "properties": {
                "delta": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
		"handlers.OKAnswer": {
					"type": "object",
					"properties": {
						"data": {
							"type": "object",
							"example": ""
						},
						"status": {
							"type": "integer",
							"example": 200
						}
					}
				},
		"handlers.BadAnswer": {
					"type": "object",
					"properties": {
						"data": {
							"type": "object",
							"example": ""
						},
						"status": {
							"type": "integer",
							"example": 400
						}
					}
				},
		"handlers.BadServerAnswer": {
					"type": "object",
					"properties": {
						"data": {
							"type": "object",
							"example": ""
						},
						"status": {
							"type": "integer",
							"example": 500
						}
					}
				},
		"handlers.OKBookingAnswer": {
					"type": "object",
					"properties": {
						"data": {
							"type": "object",
							"example": "[{id: 1, username: 'user1', startTime: '2021-01-01T00:00:00Z', endTime: '2021-01-01T01:00:00Z', delta: 0}]"
						},
						"status": {
							"type": "integer",
							"example": 200
						}
					}
				},
        "handlers.Answer": {
            "type": "object",
            "properties": {
                "data": {},
                "status": {
                    "type": "integer"
                }
            }
        },
        "userModule.UserModel": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "TimeBookingAPI",
	Description:      "This is a simple API for booking time slots",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
